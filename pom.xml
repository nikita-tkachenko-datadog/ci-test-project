<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.datadog.ci.test</groupId>
    <artifactId>ci-test-project</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <VERSION>1.3.0-SNAPSHOT</VERSION>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>dd-civisibility</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <debug.arg>
                    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005
                </debug.arg>
                <dd.java.agent.arg>
                    -javaagent:${settings.localRepository}/com/datadoghq/dd-java-agent/${VERSION}/dd-java-agent-${VERSION}.jar
                    -Ddd.civisibility.enabled=true
                    -Ddd.service=nikita-ci-test
                </dd.java.agent.arg>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>com.datadoghq</groupId>
                    <artifactId>dd-java-agent</artifactId>
                    <version>${VERSION}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!-- if your maven compiler plugin does not support annotationProcessorPaths param,
                        declare the plugin as a regular dependency -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.6.1</version>
                        <configuration>

                            <annotationProcessorPaths>
                                <annotationProcessorPath>
                                    <groupId>com.dd.ci</groupId>
                                    <artifactId>JavacPluginTest</artifactId>
                                    <version>1.0-SNAPSHOT</version>
                                </annotationProcessorPath>
                            </annotationProcessorPaths>
                            <compilerArgs>
                                <arg>-Xplugin:SourcePathInjector</arg>
                            </compilerArgs>
                            <compilerId>eclipse</compilerId>
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>org.codehaus.plexus</groupId>
                                <artifactId>plexus-compiler-eclipse</artifactId>
                                <version>2.8</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <!-- direct "javac" execution would look like
                        javac -processorpath [path to plugin classes] -Xplugin:SourceFilePathInjector ...
                        or
                        javac -cp [path to plugin classes] -Xplugin:SourceFilePathInjector ... -->

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <argLine>
                                ${debug.arg}
                                ${dd.java.agent.arg}
                            </argLine>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>